{"version":3,"sources":["webpack://image-stylization-threading/./src/ts/helpers.ts","webpack://image-stylization-threading/./src/ts/main.ts","webpack://image-stylization-threading/./src/ts/parameters.ts","webpack://image-stylization-threading/./src/ts/plotter/compositing.ts","webpack://image-stylization-threading/./src/ts/plotter/plotter-base.ts","webpack://image-stylization-threading/./src/ts/plotter/plotter-canvas-2d.ts","webpack://image-stylization-threading/./src/ts/plotter/plotter-svg.ts","webpack://image-stylization-threading/./src/ts/plotter/xml-writer.ts","webpack://image-stylization-threading/./src/ts/threading/thread-computer.ts","webpack://image-stylization-threading/./src/ts/threading/thread-plotter.ts","webpack://image-stylization-threading/./src/ts/threading/thread/thread-base.ts","webpack://image-stylization-threading/./src/ts/threading/thread/thread-monochrome.ts","webpack://image-stylization-threading/./src/ts/threading/thread/thread-red-green-blue.ts","webpack://image-stylization-threading/./src/ts/threading/transformation.ts","webpack://image-stylization-threading/webpack/bootstrap","webpack://image-stylization-threading/webpack/startup"],"names":[],"mappings":"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","file":"main.min.js","sourcesContent":["function downloadTextFile(content: string, filename: string): void {\r\n    const fileType = \"text/plain\";\r\n\r\n    const blob = new Blob([content], { type: fileType });\r\n\r\n    if (typeof window.navigator !== \"undefined\" && typeof window.navigator.msSaveBlob !== \"undefined\") { // for IE\r\n        window.navigator.msSaveBlob(blob, filename);\r\n    } else {\r\n        const objectUrl = URL.createObjectURL(blob);\r\n\r\n        const linkElement = document.createElement('a');\r\n        linkElement.download = filename;\r\n        linkElement.href = objectUrl;\r\n        linkElement.dataset.downloadurl = `${fileType}:${linkElement.download}:${linkElement.href}`;\r\n        linkElement.style.display = \"none\";\r\n        document.body.appendChild(linkElement);\r\n        linkElement.click();\r\n        document.body.removeChild(linkElement);\r\n\r\n        // don't forget to free the objectURL after a few seconds\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(objectUrl);\r\n        }, 5000);\r\n    }\r\n}\r\n\r\nfunction getQueryStringValue(name: string): string | null {\r\n    const url = window.location.href;\r\n    const queryStringStart = url.indexOf(\"?\");\r\n    if (queryStringStart >= 0) {\r\n        const queryString = url.substring(queryStringStart + 1);\r\n        if (queryString.length > 0) {\r\n            const parameters = queryString.split(\"&\");\r\n            for (const parameter of parameters) {\r\n                const keyValue = parameter.split(\"=\");\r\n                if (keyValue.length === 2) {\r\n                    const decodedKey = decodeURIComponent(keyValue[0]);\r\n                    if (decodedKey === name) {\r\n                        return decodeURIComponent(keyValue[1]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport {\r\n    downloadTextFile,\r\n    getQueryStringValue,\r\n};\r\n","import * as Helpers from \"./helpers\";\r\n\r\nimport { Parameters } from \"./parameters\";\r\n\r\nimport { PlotterCanvas2D } from \"./plotter/plotter-canvas-2d\";\r\nimport { PlotterSVG } from \"./plotter/plotter-svg\";\r\n\r\nimport { ThreadComputer } from \"./threading/thread-computer\";\r\nimport { ThreadPlotter } from \"./threading/thread-plotter\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nfunction main(): void {\r\n    const MAX_COMPUTING_TIME_PER_FRAME = 20; // ms\r\n    const canvasPlotter = new PlotterCanvas2D();\r\n    let threadPlotter: ThreadPlotter = null;\r\n    let threadComputer: ThreadComputer = null;\r\n    let needToReset = true;\r\n\r\n    Parameters.addRedrawObserver(() => { threadPlotter?.reset(); });\r\n    Parameters.addResetObserver(() => { needToReset = true; });\r\n\r\n    function mainLoop(): void {\r\n        if (needToReset) {\r\n            threadComputer.reset(Parameters.linesOpacity, Parameters.linesThickness);\r\n            threadPlotter.reset()\r\n            needToReset = false;\r\n        }\r\n\r\n        const computedSomething = threadComputer.computeNextSegments(MAX_COMPUTING_TIME_PER_FRAME);\r\n\r\n        if (computedSomething && Parameters.showIndicators) {\r\n            threadComputer.updateIndicators(Page.Canvas.setIndicatorText);\r\n        }\r\n\r\n        threadPlotter.plot();\r\n\r\n        if (Parameters.debug) {\r\n            threadComputer.drawDebugView(canvasPlotter.context);\r\n        }\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    function updateBlur(blur: number): void {\r\n        canvasPlotter.blur = blur;\r\n    }\r\n    Parameters.addBlurChangeObserver(updateBlur);\r\n    updateBlur(Parameters.blur);\r\n\r\n    function onNewImage(image: HTMLImageElement): void {\r\n        Page.Canvas.showLoader(false);\r\n        threadComputer = new ThreadComputer(image);\r\n        threadPlotter = new ThreadPlotter(canvasPlotter, threadComputer);\r\n        needToReset = true;\r\n    }\r\n    Parameters.addFileUploadObserver(onNewImage);\r\n\r\n    Page.Canvas.showLoader(true);\r\n    const defaultImage = new Image();\r\n    defaultImage.addEventListener(\"load\", () => {\r\n        onNewImage(defaultImage);\r\n        requestAnimationFrame(mainLoop);\r\n    });\r\n    defaultImage.src = \"./resources/cat.jpg\";\r\n\r\n    Parameters.addDownloadObserver(() => {\r\n        const svgPlotter = new PlotterSVG();\r\n        const plotter = new ThreadPlotter(svgPlotter, threadComputer);\r\n        plotter.plot();\r\n        const svgString = svgPlotter.export();\r\n        const filename = \"image-as-threading.svg\";\r\n        Helpers.downloadTextFile(svgString, filename);\r\n    });\r\n}\r\n\r\nmain();\r\n","import * as Helpers from \"./helpers\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nconst controlId = {\r\n    UPLOAD_INPUT_IMAGE: \"input-image-upload-button\",\r\n    SHAPE: \"shape-tabs-id\",\r\n    PEGS_DENSITY: \"pegs-range-id\",\r\n    NB_LINES: \"lines-range-id\",\r\n    QUALITY: \"quality-tabs-id\",\r\n    MODE: \"thread-mode-tabs-id\",\r\n    LINES_OPACITY: \"opacity-range-id\",\r\n    LINES_THICKNESS: \"thickness-range-id\",\r\n    DISPLAY_PEGS: \"display-pegs-checkbox-id\",\r\n    INVERT_COLORS: \"invert-colors-checkbox-id\",\r\n    SHOW_INDICATORS: \"show-indicators-checkbox-id\",\r\n    BLUR: \"blur-range-id\",\r\n    DOWNLOAD: \"result-download-id\",\r\n};\r\n\r\nenum EShape {\r\n    RECTANGLE = \"0\",\r\n    ELLIPSIS = \"1\",\r\n}\r\n\r\nenum EMode {\r\n    MONOCHROME = \"0\",\r\n    COLORS = \"1\",\r\n}\r\n\r\ntype Observer = () => unknown;\r\nconst redrawObservers: Observer[] = [];\r\nfunction triggerRedraw(): void {\r\n    for (const observer of redrawObservers) {\r\n        observer();\r\n    }\r\n}\r\n\r\nconst resetObservers: Observer[] = [];\r\nfunction triggerReset(): void {\r\n    for (const observer of resetObservers) {\r\n        observer();\r\n    }\r\n}\r\n\r\nPage.Tabs.addObserver(controlId.SHAPE, triggerReset);\r\nPage.Range.addLazyObserver(controlId.PEGS_DENSITY, triggerReset);\r\nPage.Tabs.addObserver(controlId.QUALITY, triggerReset);\r\nPage.Tabs.addObserver(controlId.MODE, triggerReset);\r\nPage.Range.addLazyObserver(controlId.LINES_OPACITY, triggerReset);\r\nPage.Range.addLazyObserver(controlId.LINES_THICKNESS, triggerReset);\r\nPage.Checkbox.addObserver(controlId.DISPLAY_PEGS, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.INVERT_COLORS, triggerReset);\r\nPage.Canvas.Observers.canvasResize.push(triggerRedraw);\r\n\r\nconst isInDebug = Helpers.getQueryStringValue(\"debug\") === \"1\";\r\n\r\nPage.Canvas.setIndicatorVisibility(\"error-average\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"error-mean-square\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"error-variance\", isInDebug);\r\n\r\nfunction updateIndicatorsVisibility(): void {\r\n    const shouldBeVisible = Page.Checkbox.isChecked(controlId.SHOW_INDICATORS);\r\n    Page.Canvas.setIndicatorsVisibility(shouldBeVisible);\r\n}\r\nPage.Checkbox.addObserver(controlId.SHOW_INDICATORS, updateIndicatorsVisibility);\r\nupdateIndicatorsVisibility();\r\n\r\nabstract class Parameters {\r\n    public static addFileUploadObserver(callback: (image: HTMLImageElement) => unknown): void {\r\n        Page.FileControl.addUploadObserver(controlId.UPLOAD_INPUT_IMAGE, (filesList: FileList) => {\r\n            if (filesList.length === 1) {\r\n                Page.Canvas.showLoader(true);\r\n                const reader = new FileReader();\r\n                reader.onload = () => {\r\n                    const image = new Image();\r\n                    image.addEventListener(\"load\", () => {\r\n                        callback(image);\r\n                    })\r\n                    image.src = reader.result as string;\r\n                };\r\n                reader.readAsDataURL(filesList[0]);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static get debug(): boolean {\r\n        return isInDebug;\r\n    }\r\n\r\n    public static get shape(): EShape {\r\n        return Page.Tabs.getValues(controlId.SHAPE)[0] as EShape;\r\n    }\r\n\r\n    public static get pegsSpacing(): number {\r\n        return 1.1 - Page.Range.getValue(controlId.PEGS_DENSITY);\r\n    }\r\n\r\n    public static get quality(): number {\r\n        return +Page.Tabs.getValues(controlId.QUALITY)[0];\r\n    }\r\n\r\n    public static get mode(): EMode {\r\n        return Page.Tabs.getValues(controlId.MODE)[0] as EMode;\r\n    }\r\n\r\n    public static get nbLines(): number {\r\n        return Page.Range.getValue(controlId.NB_LINES);\r\n    }\r\n\r\n    public static get linesOpacity(): number {\r\n        const raw = Page.Range.getValue(controlId.LINES_OPACITY);\r\n        return Math.pow(2, raw - 7); // 2^(raw+2) / 256\r\n    }\r\n\r\n    public static get linesThickness(): number {\r\n        return Page.Range.getValue(controlId.LINES_THICKNESS);\r\n    }\r\n\r\n    public static get displayPegs(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.DISPLAY_PEGS);\r\n    }\r\n\r\n    public static get invertColors(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.INVERT_COLORS);\r\n    }\r\n\r\n    public static get showIndicators(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.SHOW_INDICATORS);\r\n    }\r\n\r\n    public static addRedrawObserver(callback: Observer): void {\r\n        redrawObservers.push(callback);\r\n    }\r\n\r\n    public static addResetObserver(callback: Observer): void {\r\n        resetObservers.push(callback);\r\n    }\r\n\r\n    public static get blur(): number {\r\n        return Page.Range.getValue(controlId.BLUR);\r\n    }\r\n    public static addBlurChangeObserver(callback: (newBlur: number) => unknown): void {\r\n        Page.Range.addObserver(controlId.BLUR, callback);\r\n    }\r\n\r\n    public static addDownloadObserver(callback: () => unknown): void {\r\n        Page.FileControl.addDownloadObserver(controlId.DOWNLOAD, callback);\r\n    }\r\n}\r\n\r\nexport {\r\n    Parameters,\r\n    EMode,\r\n    EShape,\r\n};\r\n","enum ECompositingOperation {\r\n    DARKEN,\r\n    LIGHTEN,\r\n}\r\n\r\nenum EColor {\r\n    MONOCHROME,\r\n    RED,\r\n    GREEN,\r\n    BLUE,\r\n}\r\n\r\ninterface IColor {\r\n    r: number;\r\n    g: number;\r\n    b: number;\r\n}\r\n\r\nlet supportsAdvancedCompositing = true;\r\nfunction useAdvancedCompositing(): boolean {\r\n    return supportsAdvancedCompositing;\r\n}\r\n\r\nfunction computeRawColor(color: EColor): IColor {\r\n    if (color === EColor.MONOCHROME) {\r\n        return { r: 1, g: 1, b: 1 };\r\n    }\r\n\r\n    const result: IColor = {\r\n        r: (color === EColor.RED) ? 1 : 0,\r\n        g: (color === EColor.GREEN) ? 1 : 0,\r\n        b: (color === EColor.BLUE) ? 1 : 0,\r\n    };\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * @param opacity in [0, 1]\r\n */\r\nfunction applyCanvasCompositing(context: CanvasRenderingContext2D, color: EColor, opacity: number, operation: ECompositingOperation): void {\r\n    if (supportsAdvancedCompositing) {\r\n        const targetOperation = (operation === ECompositingOperation.LIGHTEN) ? \"lighter\" : \"difference\";\r\n        context.globalCompositeOperation = targetOperation;\r\n        if (context.globalCompositeOperation === targetOperation) {\r\n            const value = Math.ceil(255 * opacity);\r\n            const rawRGB = computeRawColor(color);\r\n            context.strokeStyle = `rgb(${rawRGB.r * value}, ${rawRGB.g * value}, ${rawRGB.b * value})`;\r\n            return; // success\r\n        } else {\r\n            supportsAdvancedCompositing = false;\r\n            Page.Demopage.setErrorMessage(\"advanced-compositing-not-supported\", `Your browser does not support canvas2D compositing '${targetOperation}'. The project will not run as expected.`);\r\n        }\r\n    }\r\n\r\n    // basic compositing\r\n    {\r\n        resetCanvasCompositing(context);\r\n        const value = (operation === ECompositingOperation.LIGHTEN) ? 255 : 0;\r\n        const rawRGB = computeRawColor(color);\r\n        context.strokeStyle = `rgba(${rawRGB.r * value}, ${rawRGB.g * value}, ${rawRGB.b * value}, ${opacity})`;\r\n    }\r\n}\r\n\r\nfunction resetCanvasCompositing(context: CanvasRenderingContext2D): void {\r\n    context.globalCompositeOperation = \"source-over\";\r\n}\r\n\r\nexport {\r\n    EColor,\r\n    ECompositingOperation,\r\n    applyCanvasCompositing,\r\n    computeRawColor,\r\n    resetCanvasCompositing,\r\n    useAdvancedCompositing,\r\n};\r\n","import { ILine } from \"../interfaces/i-line\";\r\nimport { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\nimport { EColor, ECompositingOperation } from \"./compositing\";\r\n\r\ninterface IPlotterInfo {\r\n    backgroundColor: string;\r\n    blur: number;\r\n}\r\n\r\ninterface IImageFitting {\r\n    sizeInPlotter: ISize;\r\n    imageRelativeToCanvasPixel: (relativeCoords: IPoint) => IPoint;\r\n};\r\n\r\nabstract class PlotterBase {\r\n    public abstract resize(): void;\r\n    public abstract initialize(infos: IPlotterInfo): void;\r\n    public abstract finalize(): void;\r\n\r\n    public abstract drawLines(lines: ILine[], color: EColor, opacity: number, operation: ECompositingOperation, thickness: number): void;\r\n    public abstract drawPoints(points: IPoint[], color: string, diameter: number): void;\r\n\r\n    public abstract get size(): ISize;\r\n\r\n    public drawBrokenLine(points: IPoint[], color: EColor, opacity: number, operation: ECompositingOperation, thickness: number): void {\r\n        const lines: ILine[] = [];\r\n\r\n        for (let i = 0; i < points.length - 1; i++) {\r\n            lines.push({ from: points[i], to: points[i + 1] });\r\n        }\r\n        this.drawLines(lines, color, opacity, operation, thickness);\r\n    }\r\n}\r\n\r\nexport { PlotterBase, IImageFitting, IPlotterInfo, ISize }\r\n","import { PlotterBase, IPlotterInfo } from \"./plotter-base\";\r\nimport { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\n\r\nimport \"../page-interface-generated\";\r\nimport { ILine } from \"../interfaces/i-line\";\r\nimport { applyCanvasCompositing, EColor, ECompositingOperation, resetCanvasCompositing } from \"./compositing\";\r\n\r\nclass PlotterCanvas2D extends PlotterBase {\r\n    private readonly canvas: HTMLCanvasElement;\r\n    public readonly context: CanvasRenderingContext2D;\r\n    private readonly cssPixel: number;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.canvas = Page.Canvas.getCanvas();\r\n        this.context = this.canvas.getContext(\"2d\", { alpha: false });\r\n        this.cssPixel = window.devicePixelRatio ?? 1;\r\n    }\r\n\r\n    public resize(): void {\r\n        const actualWidth = Math.floor(this.cssPixel * this.canvas.clientWidth);\r\n        const actualHeight = Math.floor(this.cssPixel * this.canvas.clientHeight);\r\n\r\n        if (this.canvas.width !== actualWidth || this.canvas.height !== actualHeight) {\r\n            this.canvas.width = actualWidth;\r\n            this.canvas.height = actualHeight;\r\n        }\r\n    }\r\n\r\n    public initialize(infos: IPlotterInfo): void {\r\n        this.context.fillStyle = infos.backgroundColor;\r\n        this.context.lineJoin = \"round\";\r\n        resetCanvasCompositing(this.context);\r\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void { }\r\n\r\n    public set blur(value: number) {\r\n        if (value === 0) {\r\n            this.canvas.style.filter = \"\";\r\n        } else {\r\n            this.canvas.style.filter = `blur(${value}px)`; // simple blur supported everywhere but with artifacts on the edges\r\n            // artifact-free blur, but not supported everywhere\r\n            this.canvas.style.filter = `url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='a' x='0' y='0' width='1' height='1'%3E%3CfeGaussianBlur stdDeviation='${value}' result='b'/%3E%3CfeMorphology operator='dilate' radius='${value}'/%3E %3CfeMerge%3E%3CfeMergeNode/%3E%3CfeMergeNode in='b'/%3E%3C/feMerge%3E%3C/filter%3E%3C/svg%3E#a\")`;\r\n        }\r\n    }\r\n\r\n    public drawLines(lines: ILine[], color: EColor, opacity: number, operation: ECompositingOperation, thickness: number): void {\r\n        if (lines.length >= 1) {\r\n            applyCanvasCompositing(this.context, color, opacity, operation);\r\n\r\n            this.context.lineWidth = thickness * this.cssPixel;\r\n\r\n            for (const line of lines) {\r\n                this.context.beginPath();\r\n                this.context.moveTo(line.from.x * this.cssPixel, line.from.y * this.cssPixel);\r\n                this.context.lineTo(line.to.x * this.cssPixel, line.to.y * this.cssPixel);\r\n                this.context.stroke();\r\n                this.context.closePath();\r\n            }\r\n\r\n            resetCanvasCompositing(this.context);\r\n        }\r\n    }\r\n\r\n    public drawPoints(points: IPoint[], color: string, diameter: number): void {\r\n        if (points.length > 0) {\r\n            this.context.fillStyle = color;\r\n            this.context.strokeStyle = \"none\";\r\n\r\n            for (const point of points) {\r\n                this.context.beginPath();\r\n                this.context.arc(point.x * this.cssPixel, point.y * this.cssPixel, 0.5 * diameter * this.cssPixel, 0, 2 * Math.PI);\r\n                this.context.fill();\r\n                this.context.closePath();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return {\r\n            width: Math.floor(this.canvas.width / this.cssPixel),\r\n            height: Math.floor(this.canvas.height / this.cssPixel),\r\n        };\r\n    }\r\n}\r\n\r\nexport { PlotterCanvas2D }\r\n","import { ILine } from \"../interfaces/i-line\";\r\nimport { IPoint } from \"../interfaces/i-point\";\r\nimport { computeRawColor, EColor, ECompositingOperation, useAdvancedCompositing } from \"./compositing\";\r\nimport { PlotterBase, IPlotterInfo, ISize } from \"./plotter-base\";\r\nimport { XMLWriter } from \"./xml-writer\";\r\n\r\nconst WIDTH = 1000;\r\nconst HEIGHT = 1000;\r\n\r\nconst BLUR_EFFECT_ID = \"gaussianBlur\";\r\n\r\nclass PlotterSVG extends PlotterBase {\r\n    private hasBlur: boolean;\r\n    private writer: XMLWriter;\r\n\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public resize(): void {\r\n    }\r\n\r\n    public initialize(infos: IPlotterInfo): void {\r\n        this.writer = new XMLWriter();\r\n\r\n        this.hasBlur = infos.blur > 0;\r\n\r\n        this.writer.addLine(`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>`);\r\n        this.writer.startBlock(`<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 ${WIDTH} ${HEIGHT}\">`);\r\n\r\n        if (this.hasBlur) {\r\n            this.writer.startBlock(`<defs>`);\r\n            this.writer.startBlock(`<filter id=\"${BLUR_EFFECT_ID}\" x=\"0\" y=\"0\">`);\r\n            this.writer.addLine(`<feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"${infos.blur}\"/>`);\r\n            this.writer.endBlock(`</filter>`);\r\n            this.writer.endBlock(`</defs>`);\r\n\r\n            this.writer.startBlock(`<g filter=\"url(#${BLUR_EFFECT_ID})\">`);\r\n\r\n        }\r\n\r\n        const margin = 10;\r\n        this.writer.addLine(`<rect fill=\"white\" stroke=\"none\" x=\"${-margin}\" y=\"${-margin}\" width=\"${WIDTH + 2 * margin}\" height=\"${HEIGHT + 2 * margin}\"/>`);\r\n    }\r\n\r\n    public finalize(): void {\r\n        if (this.hasBlur) {\r\n            this.writer.endBlock(`</g>`);\r\n        }\r\n        this.writer.endBlock(`</svg>`);\r\n    }\r\n\r\n    public drawLines(lines: ILine[], color: EColor, opacity: number, operation: ECompositingOperation, thickness: number): void {\r\n        if (lines.length >= 1) {\r\n\r\n            let strokeColor: string;\r\n            if (useAdvancedCompositing()) {\r\n                this.writer.startBlock(`<defs>`);\r\n                this.writer.startBlock(`<style type=\"text/css\">`);\r\n                this.writer.startBlock(`<![CDATA[`);\r\n                this.writer.addLine(`line { mix-blend-mode: difference; }`);\r\n                if (operation === ECompositingOperation.LIGHTEN) {\r\n                    this.writer.addLine(`svg { filter: invert(1); background: black; }`);\r\n                }\r\n                this.writer.endBlock(`]]>`);\r\n                this.writer.endBlock(`</style>`);\r\n                this.writer.endBlock(`</defs>`);\r\n\r\n                const value = Math.ceil(255 * opacity);\r\n                const rawRGB = computeRawColor(color);\r\n                strokeColor = `rgb(${rawRGB.r * value}, ${rawRGB.g * value}, ${rawRGB.b * value})`;\r\n            } else {\r\n                const value = (useAdvancedCompositing()) ? 255 : 0;\r\n                const rawRGB = computeRawColor(color);\r\n                strokeColor = `rgba(${rawRGB.r * value}, ${rawRGB.g * value}, ${rawRGB.b * value}, ${opacity})`;\r\n            }\r\n\r\n            // lines container\r\n            this.writer.startBlock(`<g stroke=\"${strokeColor}\" stroke-width=\"${thickness}\" stroke-linecap=\"round\" fill=\"none\">`);\r\n            for (const line of lines) {\r\n                this.writer.addLine(`<line x1=\"${line.from.x.toFixed(1)}\" y1=\"${line.from.y.toFixed(1)}\" x2=\"${line.to.x.toFixed(1)}\" y2=\"${line.to.y.toFixed(1)}\"/>`);\r\n            }\r\n            this.writer.endBlock(`</g>`);\r\n        }\r\n    }\r\n\r\n    public drawPoints(points: IPoint[], color: string, diameter: number): void {\r\n        if (points.length > 0) {\r\n            this.writer.startBlock(`<g fill=\"${color}\" stroke=\"none\">`);\r\n            for (const point of points) {\r\n                this.writer.addLine(`<circle cx=\"${point.x.toFixed(1)}\" cy=\"${point.y.toFixed(1)}\" r=\"${0.5 * diameter}\"/>`);\r\n            }\r\n            this.writer.endBlock(`</g>`);\r\n        }\r\n    }\r\n\r\n    public export(): string {\r\n        const start = Date.now();\r\n        const result = this.writer.result;\r\n        console.log(`Concatenation took ${Date.now() - start} ms.`);\r\n        return result;\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return {\r\n            width: WIDTH,\r\n            height: HEIGHT,\r\n        };\r\n    }\r\n}\r\n\r\nexport { PlotterSVG }\r\n","class XMLWriter {\r\n    private indentationLevel: number = 0;\r\n    private lines: string[] = [];\r\n\r\n    public get result(): string {\r\n        return this.lines.join(\"\\n\");\r\n    }\r\n\r\n    public startBlock(line: string): void {\r\n        this.addLine(line);\r\n        this.indentationLevel++;\r\n    }\r\n\r\n    public endBlock(line: string): void {\r\n        this.indentationLevel--;\r\n        this.addLine(line);\r\n    }\r\n\r\n    public addLine(line: string): void {\r\n        this.lines.push(this.prefix + line);\r\n    }\r\n\r\n    private get prefix(): string {\r\n        return \"\\t\".repeat(this.indentationLevel);\r\n    }\r\n}\r\n\r\nexport { XMLWriter };\r\n","import { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\nimport { EMode, EShape, Parameters } from \"../parameters\";\r\nimport { PlotterBase } from \"../plotter/plotter-base\";\r\nimport { Transformation } from \"./transformation\";\r\nimport { applyCanvasCompositing, EColor, ECompositingOperation, resetCanvasCompositing } from \"../plotter/compositing\";\r\n\r\nimport { ThreadMonochrome } from \"./thread/thread-monochrome\";\r\nimport { ThreadRedBlueGreen } from \"./thread/thread-red-green-blue\";\r\nimport { ThreadBase } from \"./thread/thread-base\";\r\n\r\nconst MIN_SAFE_NUMBER = -9007199254740991;\r\nconst TWO_PI = 2 * Math.PI;\r\n\r\nfunction clamp(x: number, min: number, max: number): number {\r\n    if (x < min) {\r\n        return min;\r\n    } else if (x > max) {\r\n        return max;\r\n    }\r\n    return x;\r\n}\r\n\r\nfunction mix(a: number, b: number, x: number): number {\r\n    return a * (1 - x) + b * x;\r\n}\r\n\r\nfunction distance(p1: IPoint, p2: IPoint): number {\r\n    const dX = p1.x - p2.x;\r\n    const dY = p1.y - p2.y;\r\n    return Math.sqrt(dX * dX + dY * dY);\r\n}\r\n\r\nfunction randomItem<T>(list: T[]): T {\r\n    if (list.length === 0) {\r\n        return null;\r\n    }\r\n    const randomIndex = Math.floor(Math.random() * list.length);\r\n    return list[randomIndex];\r\n}\r\n\r\ninterface IPeg {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ninterface ISegment {\r\n    peg1: IPeg;\r\n    peg2: IPeg;\r\n}\r\n\r\ninterface IErrorMeasure {\r\n    average: number;\r\n    variance: number;\r\n    meanSquare: number;\r\n}\r\n\r\ntype IndicatorUpdateFunction = (indicatorId: string, indicatorValue: string) => unknown;\r\n\r\n/**\r\n * Class used to compute which thread path is the best choice.\r\n */\r\nclass ThreadComputer {\r\n    private readonly sourceImage: HTMLImageElement;\r\n    private readonly hiddenCanvas: HTMLCanvasElement;\r\n    private readonly hiddenCanvasContext: CanvasRenderingContext2D;\r\n    private hiddenCanvasData: ImageData = null\r\n    private hiddenCanvasScale: number;\r\n\r\n    private error: IErrorMeasure;\r\n\r\n    private pegs: IPeg[];\r\n\r\n    private lineOpacity: number; // in the final result\r\n    private lineOpacityInternal: number;\r\n    private lineThickness: number; // abstract unit\r\n\r\n    private thread: ThreadBase;\r\n\r\n    private arePegsTooClose: (peg1: IPeg, peg2: IPeg) => boolean;\r\n\r\n    public constructor(image: HTMLImageElement) {\r\n        this.sourceImage = image;\r\n\r\n        this.hiddenCanvas = document.createElement(\"canvas\");\r\n        this.hiddenCanvasContext = this.hiddenCanvas.getContext(\"2d\");\r\n\r\n        this.reset(16 / 256, 1);\r\n    }\r\n\r\n    public drawThread(plotter: PlotterBase, nbSegmentsToIgnore: number): void {\r\n        const transformation = this.computeTransformation(plotter.size);\r\n        const lineWidth = (transformation.scaling * this.hiddenCanvasScale) * this.lineThickness;\r\n        const compositing = Parameters.invertColors ? ECompositingOperation.LIGHTEN : ECompositingOperation.DARKEN;\r\n\r\n        this.thread.iterateOnThreads(nbSegmentsToIgnore, (thread: IPeg[], color: EColor) => {\r\n            const points: IPoint[] = [];\r\n            for (const peg of thread) {\r\n                points.push(transformation.transform(peg));\r\n            }\r\n\r\n            plotter.drawBrokenLine(points, color, this.lineOpacity, compositing, lineWidth);\r\n        });\r\n    }\r\n\r\n    public drawPegs(plotter: PlotterBase): void {\r\n        const transformation = this.computeTransformation(plotter.size);\r\n        const pointSize = 0.5 * (transformation.scaling * this.hiddenCanvasScale);\r\n\r\n        const points: IPoint[] = [];\r\n        for (const peg of this.pegs) {\r\n            points.push(transformation.transform(peg));\r\n        }\r\n\r\n        plotter.drawPoints(points, \"red\", pointSize);\r\n    }\r\n\r\n    public drawDebugView(targetContext: CanvasRenderingContext2D): void {\r\n        targetContext.drawImage(this.hiddenCanvas, 0, 0, this.hiddenCanvas.width, this.hiddenCanvas.height);\r\n    }\r\n\r\n    /** Returns true if there is nothing more to compute */\r\n    public computeNextSegments(maxMillisecondsTaken: number): boolean {\r\n        const start = performance.now();\r\n\r\n        const targetNbSegments = Parameters.nbLines;\r\n        if (this.nbSegments === targetNbSegments) {\r\n            // no new segment to compute\r\n            return false;\r\n        } else if (this.nbSegments > targetNbSegments) {\r\n            // we drew too many lines already, removes the excess\r\n            this.thread.lowerNbSegments(targetNbSegments);\r\n\r\n            // redraw the hidden canvas from scratch\r\n            this.resetHiddenCanvas();\r\n            this.thread.iterateOnThreads(0, (thread: IPeg[], color: EColor) => {\r\n                applyCanvasCompositing(this.hiddenCanvasContext, color, this.lineOpacityInternal, ECompositingOperation.LIGHTEN);\r\n\r\n                for (let iPeg = 0; iPeg + 1 < thread.length; iPeg++) {\r\n                    this.drawSegmentOnHiddenCanvas(thread[iPeg], thread[iPeg + 1]);\r\n                }\r\n            });\r\n\r\n            this.computeError();\r\n            return true;\r\n        }\r\n\r\n        let lastColor: EColor = null;\r\n        while (this.nbSegments < targetNbSegments && performance.now() - start < maxMillisecondsTaken) {\r\n            const threadToGrow = this.thread.getThreadToGrow();\r\n\r\n            if (lastColor !== threadToGrow.color) {\r\n                applyCanvasCompositing(this.hiddenCanvasContext, threadToGrow.color, this.lineOpacityInternal, ECompositingOperation.LIGHTEN);\r\n                this.thread.enableSamplingFor(threadToGrow.color);\r\n                lastColor = threadToGrow.color;\r\n            }\r\n            this.computeSegment(threadToGrow.thread);\r\n\r\n            if (this.nbSegments % 100 === 0) {\r\n                this.computeError();\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param opacity in [0,1]\r\n     * @returns true if at least one parameter changed\r\n     */\r\n    public reset(opacity: number, linethickness: number): void {\r\n        this.lineOpacity = opacity;\r\n        this.lineThickness = linethickness;\r\n\r\n        this.hiddenCanvasScale = Parameters.quality;\r\n\r\n        if (Parameters.mode === EMode.MONOCHROME) {\r\n            this.thread = new ThreadMonochrome();\r\n        } else {\r\n            this.thread = new ThreadRedBlueGreen();\r\n        }\r\n        this.resetHiddenCanvas();\r\n\r\n        this.pegs = this.computePegs();\r\n    }\r\n\r\n    public updateIndicators(updateFunction: IndicatorUpdateFunction): void {\r\n        updateFunction(\"pegs-count\", this.pegs.length.toString());\r\n        updateFunction(\"segments-count\", this.nbSegments.toString());\r\n        updateFunction(\"error-average\", this.error.average.toString());\r\n        updateFunction(\"error-mean-square\", this.error.meanSquare.toString());\r\n        updateFunction(\"error-variance\", this.error.variance.toString());\r\n    }\r\n\r\n    public get nbSegments(): number {\r\n        return this.thread.totalNbSegments;\r\n    }\r\n\r\n    private initializeHiddenCanvasLineProperties(): void {\r\n        const theoricalThicknes = this.lineThickness * this.hiddenCanvasScale;\r\n\r\n        if (theoricalThicknes <= 1) {\r\n            // do not go below a line width of 1 because it creates artifact.\r\n            // instead, lower the lines opacity.\r\n            this.lineOpacityInternal = 0.5 * this.lineOpacity * theoricalThicknes;\r\n            this.hiddenCanvasContext.lineWidth = 1;\r\n        } else {\r\n            this.lineOpacityInternal = 0.5 * this.lineOpacity;\r\n            this.hiddenCanvasContext.lineWidth = theoricalThicknes;\r\n        }\r\n    }\r\n\r\n    private computeSegment(thread: IPeg[]): void {\r\n        let lastPeg: IPeg;\r\n        let nextPeg: IPeg;\r\n\r\n        if (thread.length === 0) {\r\n            const startingSegment = this.computeBestStartingSegment();\r\n            thread.push(startingSegment.peg1);\r\n            lastPeg = startingSegment.peg1;\r\n            nextPeg = startingSegment.peg2;\r\n        } else {\r\n            lastPeg = thread[thread.length - 1];\r\n            const HISTORY_SIZE = Math.min(thread.length, 20);\r\n            const prevousPegs = thread.slice(-HISTORY_SIZE);\r\n            nextPeg = this.computeBestNextPeg(lastPeg, prevousPegs);\r\n        }\r\n\r\n        thread.push(nextPeg);\r\n        this.drawSegmentOnHiddenCanvas(lastPeg, nextPeg);\r\n    }\r\n\r\n    private resetHiddenCanvas(): void {\r\n        const wantedSize = ThreadComputer.computeBestSize(this.sourceImage, 100 * this.hiddenCanvasScale);\r\n        this.hiddenCanvas.width = wantedSize.width;\r\n        this.hiddenCanvas.height = wantedSize.height;\r\n\r\n        resetCanvasCompositing(this.hiddenCanvasContext);\r\n        this.hiddenCanvasContext.drawImage(this.sourceImage, 0, 0, wantedSize.width, wantedSize.height);\r\n\r\n        // change the base level so that pure white becomes medium grey\r\n        const imageData = this.hiddenCanvasContext.getImageData(0, 0, wantedSize.width, wantedSize.height);\r\n        this.thread.adjustCanvasData(imageData.data, Parameters.invertColors);\r\n        this.hiddenCanvasContext.putImageData(imageData, 0, 0);\r\n        this.computeError();\r\n\r\n        this.initializeHiddenCanvasLineProperties();\r\n    }\r\n\r\n    private computeError(): void {\r\n        this.uploadCanvasDataToCPU();\r\n\r\n        this.error = {\r\n            average: 0,\r\n            variance: 0,\r\n            meanSquare: 0,\r\n        };\r\n\r\n        const nbPixels = this.hiddenCanvasData.width * this.hiddenCanvasData.height;\r\n        const nbSamples = 3 * nbPixels;\r\n        for (let iP = 0; iP < nbPixels; iP++) {\r\n            const errorRed = 127 - this.hiddenCanvasData.data[4 * iP + 0];\r\n            const errorGreen = 127 - this.hiddenCanvasData.data[4 * iP + 1];\r\n            const errorBlue = 127 - this.hiddenCanvasData.data[4 * iP + 2];\r\n\r\n            this.error.average += errorRed + errorGreen + errorBlue;\r\n            this.error.meanSquare += (errorRed * errorRed) + (errorGreen * errorGreen) + (errorBlue * errorBlue);\r\n        }\r\n        this.error.average = Math.round(this.error.average / nbSamples);\r\n        this.error.meanSquare = Math.round(this.error.meanSquare / nbSamples);\r\n\r\n        for (let iP = 0; iP < nbPixels; iP++) {\r\n            const errorRed = 127 - this.hiddenCanvasData.data[4 * iP + 0];\r\n            const errorGreen = 127 - this.hiddenCanvasData.data[4 * iP + 1];\r\n            const errorBlue = 127 - this.hiddenCanvasData.data[4 * iP + 2];\r\n            const error = (errorRed + errorGreen + errorBlue) / 3;\r\n            const distancetoError = error - this.error.average;\r\n            this.error.variance += distancetoError * distancetoError;\r\n        }\r\n        this.error.variance = Math.round(this.error.variance / nbSamples);\r\n    }\r\n\r\n    private computeTransformation(targetSize: ISize): Transformation {\r\n        return new Transformation(targetSize, this.hiddenCanvas);\r\n    }\r\n\r\n    private drawSegmentOnHiddenCanvas(peg1: IPeg, peg2: IPeg): void {\r\n        this.hiddenCanvasContext.beginPath();\r\n        this.hiddenCanvasContext.moveTo(peg1.x, peg1.y);\r\n        this.hiddenCanvasContext.lineTo(peg2.x, peg2.y);\r\n        this.hiddenCanvasContext.stroke();\r\n        this.hiddenCanvasContext.closePath();\r\n\r\n        // invalidate CPU data\r\n        this.hiddenCanvasData = null;\r\n    }\r\n\r\n    private computeBestStartingSegment(): ISegment {\r\n        let candidates: ISegment[] = [];\r\n        let bestScore = MIN_SAFE_NUMBER;\r\n\r\n        const step = 1 + Math.floor(this.pegs.length / 100);\r\n        for (let iPegId1 = 0; iPegId1 < this.pegs.length; iPegId1 += step) {\r\n            for (let iPegId2 = iPegId1 + 1; iPegId2 < this.pegs.length; iPegId2 += step) {\r\n                const peg1 = this.pegs[iPegId1];\r\n                const peg2 = this.pegs[iPegId2];\r\n\r\n                if (!this.arePegsTooClose(peg1, peg2)) {\r\n                    const candidateScore = this.computeSegmentPotential(peg1, peg2);\r\n                    if (candidateScore > bestScore) {\r\n                        bestScore = candidateScore;\r\n                        candidates = [{ peg1, peg2, }];\r\n                    } else if (candidateScore === bestScore) {\r\n                        candidates.push({ peg1, peg2, });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return randomItem(candidates);\r\n    }\r\n\r\n    private computeBestNextPeg(currentPeg: IPeg, pegsToAvoid: IPeg[]): IPeg {\r\n        let candidates: IPeg[] = [];\r\n        let bestScore = MIN_SAFE_NUMBER;\r\n\r\n        for (const peg of this.pegs) {\r\n            if (!this.arePegsTooClose(currentPeg, peg) && !pegsToAvoid.includes(peg)) {\r\n                const candidateScore = this.computeSegmentPotential(currentPeg, peg);\r\n                if (candidateScore > bestScore) {\r\n                    bestScore = candidateScore;\r\n                    candidates = [peg];\r\n                } else if (candidateScore === bestScore) {\r\n                    candidates.push(peg);\r\n                }\r\n            }\r\n        }\r\n\r\n        return randomItem(candidates);\r\n    }\r\n\r\n    private uploadCanvasDataToCPU(): void {\r\n        if (this.hiddenCanvasData === null) {\r\n            const width = this.hiddenCanvas.width;\r\n            const height = this.hiddenCanvas.height;\r\n            this.hiddenCanvasData = this.hiddenCanvasContext.getImageData(0, 0, width, height);\r\n        }\r\n    }\r\n\r\n    /* The higher the result, the better a choice the thread is. */\r\n    private computeSegmentPotential(peg1: IPeg, peg2: IPeg): number {\r\n        this.uploadCanvasDataToCPU();\r\n\r\n        let potential = 0;\r\n\r\n        const segmentLength = distance(peg1, peg2);\r\n        const nbSamples = Math.ceil(segmentLength);\r\n        for (let iSample = 0; iSample < nbSamples; iSample++) {\r\n            const r = (iSample + 1) / (nbSamples + 1);\r\n            const sample: IPoint = {\r\n                x: mix(peg1.x, peg2.x, r),\r\n                y: mix(peg1.y, peg2.y, r),\r\n            };\r\n\r\n            const imageValue = this.sampleCanvasData(sample);\r\n            const finalValue = imageValue + (this.lineOpacityInternal * 255);\r\n            const contribution = 127 - finalValue;\r\n            potential += contribution;\r\n        }\r\n\r\n        return potential / nbSamples;\r\n    }\r\n\r\n    /** Linear interpolation. Returns a result in [0, 255] */\r\n    private sampleCanvasData(coords: IPoint): number {\r\n        const width = this.hiddenCanvasData.width;\r\n        const height = this.hiddenCanvasData.height;\r\n\r\n        const minX = clamp(Math.floor(coords.x), 0, width - 1);\r\n        const maxX = clamp(Math.ceil(coords.x), 0, width - 1);\r\n        const minY = clamp(Math.floor(coords.y), 0, height - 1);\r\n        const maxY = clamp(Math.ceil(coords.y), 0, height - 1);\r\n\r\n        const topLeft = this.sampleCanvasPixel(minX, minY);\r\n        const topRight = this.sampleCanvasPixel(maxX, minY);\r\n        const bottomLeft = this.sampleCanvasPixel(minX, maxY);\r\n        const bottomRight = this.sampleCanvasPixel(maxX, maxY);\r\n\r\n        const fractX = coords.x % 1;\r\n        const top = mix(topLeft, topRight, fractX);\r\n        const bottom = mix(bottomLeft, bottomRight, fractX);\r\n\r\n        const fractY = coords.y % 1;\r\n        return mix(top, bottom, fractY);\r\n    }\r\n\r\n    private sampleCanvasPixel(pixelX: number, pixelY: number): number {\r\n        const index = 4 * (pixelX + pixelY * this.hiddenCanvasData.width);\r\n        return this.thread.sampleCanvas(this.hiddenCanvasData.data, index);\r\n    }\r\n\r\n    private static computeBestSize(sourceImageSize: ISize, maxSize: number): ISize {\r\n        const maxSourceSide = Math.max(sourceImageSize.width, sourceImageSize.height);\r\n        const sizingFactor = maxSize / maxSourceSide;\r\n        return {\r\n            width: Math.ceil(sourceImageSize.width * sizingFactor),\r\n            height: Math.ceil(sourceImageSize.height * sizingFactor),\r\n        };\r\n    }\r\n\r\n    private computePegs(): IPeg[] {\r\n        /* First, compute pegs for a fixed-size canvas*/\r\n        let domainSize: ISize;\r\n        {\r\n            const DEFAULT_CANVAS_SIZE_FOR_PEGS = 1000;\r\n            const aspectRatio = this.hiddenCanvas.width / this.hiddenCanvas.height;\r\n            if (aspectRatio > 1) {\r\n                domainSize = { width: DEFAULT_CANVAS_SIZE_FOR_PEGS, height: Math.round(DEFAULT_CANVAS_SIZE_FOR_PEGS / aspectRatio) };\r\n            } else {\r\n                domainSize = { width: Math.round(DEFAULT_CANVAS_SIZE_FOR_PEGS * aspectRatio), height: DEFAULT_CANVAS_SIZE_FOR_PEGS };\r\n            }\r\n        }\r\n        const pegsShape = Parameters.shape;\r\n        const pegsSpacing = 20 * Parameters.pegsSpacing;\r\n\r\n        const pegs: IPeg[] = [];\r\n\r\n        if (pegsShape === EShape.RECTANGLE) {\r\n            this.arePegsTooClose = (peg1: IPeg, peg2: IPeg) => {\r\n                return peg1.x === peg2.x || peg1.y === peg2.y;\r\n            };\r\n\r\n            const maxX = domainSize.width;\r\n            const maxY = domainSize.height;\r\n\r\n            // corners\r\n            pegs.push({ x: 0, y: 0 });\r\n            pegs.push({ x: maxX, y: 0 });\r\n            pegs.push({ x: maxX, y: maxY });\r\n            pegs.push({ x: 0, y: maxY });\r\n\r\n            // sides\r\n            const nbPegsPerWidth = Math.ceil(domainSize.width / pegsSpacing);\r\n            for (let iW = 1; iW < nbPegsPerWidth; iW++) {\r\n                const x = maxX * (iW / nbPegsPerWidth);\r\n                pegs.push({ x, y: 0 });\r\n                pegs.push({ x, y: maxY });\r\n            }\r\n\r\n            const nbPegsPerHeight = Math.ceil(domainSize.height / pegsSpacing);\r\n            for (let iH = 1; iH < nbPegsPerHeight; iH++) {\r\n                const y = maxY * (iH / nbPegsPerHeight);\r\n                pegs.push({ x: 0, y });\r\n                pegs.push({ x: maxX, y });\r\n            }\r\n        } else {\r\n            interface IPegCircle extends IPeg {\r\n                angle: number;\r\n            }\r\n\r\n            this.arePegsTooClose = (peg1: IPeg, peg2: IPeg) => {\r\n                const absDeltaAngle = Math.abs((peg1 as IPegCircle).angle - (peg2 as IPegCircle).angle);\r\n                const minAngle = Math.min(absDeltaAngle, TWO_PI - absDeltaAngle);\r\n                return minAngle <= TWO_PI / 16;\r\n            };\r\n\r\n            const maxSize = Math.max(domainSize.width, domainSize.height);\r\n            const nbPegs = Math.ceil(0.5 * TWO_PI * maxSize / pegsSpacing);\r\n            const baseDeltaAngle = TWO_PI / nbPegs;\r\n            for (let iPeg = 0; iPeg < nbPegs; iPeg++) {\r\n                const angle = iPeg * baseDeltaAngle;\r\n                const peg: IPegCircle = {\r\n                    x: 0.5 * domainSize.width * (1 + Math.cos(angle)),\r\n                    y: 0.5 * domainSize.height * (1 + Math.sin(angle)),\r\n                    angle,\r\n                }\r\n                pegs.push(peg);\r\n            }\r\n        }\r\n\r\n        /* Then adjust the pegs to the actual canvas size */\r\n        for (const peg of pegs) {\r\n            peg.x *= this.hiddenCanvas.width / domainSize.width;\r\n            peg.y *= this.hiddenCanvas.height / domainSize.height;\r\n        }\r\n\r\n        return pegs;\r\n    }\r\n}\r\n\r\nexport { ThreadComputer, IPeg };\r\n","import { Parameters } from \"../parameters\";\r\nimport { IPlotterInfo, PlotterBase } from \"../plotter/plotter-base\";\r\nimport { ThreadComputer } from \"./thread-computer\";\r\n\r\nclass ThreadPlotter {\r\n    private nbSegmentsDrawn: number = 0;\r\n\r\n    public constructor(private readonly plotter: PlotterBase, private readonly threadComputer: ThreadComputer) { }\r\n\r\n    public reset(): void {\r\n        this.nbSegmentsDrawn = 0;\r\n    }\r\n\r\n    public plot(): void {\r\n        if (this.nbSegmentsDrawn === this.threadComputer.nbSegments) {\r\n            // nothing more to do\r\n            return;\r\n        } else if (this.nbSegmentsDrawn > this.threadComputer.nbSegments) {\r\n            // if the nb of segment went down, no other choice that redrawing all from scratch\r\n            this.nbSegmentsDrawn = 0;\r\n        }\r\n\r\n        const drawFromScratch = (this.nbSegmentsDrawn === 0);\r\n        if (drawFromScratch) {\r\n            const plotterInfos: IPlotterInfo = {\r\n                backgroundColor: Parameters.invertColors ? \"black\" : \"white\",\r\n                blur: Parameters.blur,\r\n            };\r\n\r\n            this.plotter.resize();\r\n            this.plotter.initialize(plotterInfos);\r\n\r\n            if (Parameters.displayPegs) {\r\n                this.threadComputer.drawPegs(this.plotter);\r\n            }\r\n\r\n            this.threadComputer.drawThread(this.plotter, 0);\r\n            this.plotter.finalize();\r\n        } else {\r\n            this.threadComputer.drawThread(this.plotter, this.nbSegmentsDrawn);\r\n        }\r\n\r\n        this.nbSegmentsDrawn = this.threadComputer.nbSegments;\r\n    }\r\n}\r\n\r\nexport { ThreadPlotter };\r\n","import { EColor } from \"../../plotter/compositing\";\r\nimport { IPeg } from \"../thread-computer\";\r\n\r\ntype ThreadsIterator = (thread: IPeg[], color: EColor) => unknown;\r\n\r\ntype SamplingFunction = (data: Uint8ClampedArray, index: number) => number;\r\n\r\ninterface IThreadToGrow {\r\n    thread: IPeg[];\r\n    color: EColor;\r\n}\r\n\r\nabstract class ThreadBase {\r\n    public abstract get totalNbSegments(): number;\r\n\r\n    public abstract lowerNbSegments(targetNumber: number): void;\r\n\r\n    public abstract iterateOnThreads(nbSegmentsToIgnore: number, callback: ThreadsIterator): void;\r\n\r\n    public abstract getThreadToGrow(): IThreadToGrow;\r\n\r\n    public abstract adjustCanvasData(data: Uint8ClampedArray, blackBackground: boolean): void;\r\n\r\n    public abstract enableSamplingFor(color: EColor): void;\r\n\r\n    /**\r\n     * @returns value in [0, 255]. Ideal value is 127\r\n     */\r\n    public sampleCanvas: SamplingFunction = null;\r\n\r\n    protected static lowerNbSegmentsForThread(thread: IPeg[], targetNumber: number): void {\r\n        if (targetNumber > 0) {\r\n            thread.length = Math.min(thread.length, targetNumber + 1);\r\n        } else {\r\n            thread.length = 0;\r\n        }\r\n    }\r\n\r\n    protected static computeNbSegments(thread: IPeg[]): number {\r\n        return (thread.length > 1) ? thread.length - 1 : 0;\r\n    }\r\n\r\n    public static iterateOnThread(thread: IPeg[], color: EColor, fromSegmentNumber: number, callback: ThreadsIterator): void {\r\n        const threadLength = ThreadBase.computeNbSegments(thread);\r\n        if (fromSegmentNumber < threadLength) {\r\n            const threadPart = thread.slice(fromSegmentNumber);\r\n            callback(threadPart, color);\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    IThreadToGrow,\r\n    ThreadBase,\r\n    ThreadsIterator,\r\n};\r\n","import { EColor } from \"../../plotter/compositing\";\r\nimport { IPeg } from \"../thread-computer\";\r\n\r\nimport { IThreadToGrow, ThreadBase, ThreadsIterator } from \"./thread-base\";\r\n\r\nclass ThreadMonochrome extends ThreadBase {\r\n    private threadPegs: IPeg[] = [];\r\n\r\n    public get totalNbSegments(): number {\r\n        return ThreadBase.computeNbSegments(this.threadPegs);\r\n    }\r\n\r\n    public lowerNbSegments(targetNumber: number): void {\r\n        ThreadBase.lowerNbSegmentsForThread(this.threadPegs, targetNumber);\r\n    }\r\n\r\n    public iterateOnThreads(nbSegmentsToIgnore: number, callback: ThreadsIterator): void {\r\n        ThreadBase.iterateOnThread(this.threadPegs, EColor.MONOCHROME, nbSegmentsToIgnore, callback);\r\n    }\r\n\r\n    public getThreadToGrow(): IThreadToGrow {\r\n        return {\r\n            thread: this.threadPegs,\r\n            color: EColor.MONOCHROME,\r\n        }\r\n    }\r\n\r\n    public adjustCanvasData(data: Uint8ClampedArray, blackBackground: boolean): void {\r\n        let computeAdjustedValue: (rawValue: number) => number;\r\n        if (blackBackground) {\r\n            computeAdjustedValue = (rawValue: number) => (255 - rawValue) / 2;\r\n        } else {\r\n            computeAdjustedValue = (rawValue: number) => rawValue / 2;\r\n        }\r\n\r\n        const nbPixels = data.length / 4;\r\n        for (let i = 0; i < nbPixels; i++) {\r\n            const averageSourceValue = (data[4 * i + 0] + data[4 * i + 1] + data[4 * i + 2]) / 3;\r\n            const adjustedValue = computeAdjustedValue(averageSourceValue);\r\n            data[4 * i + 0] = adjustedValue;\r\n            data[4 * i + 1] = adjustedValue;\r\n            data[4 * i + 2] = adjustedValue;\r\n        }\r\n    }\r\n\r\n    public enableSamplingFor(): void {\r\n        if (this.sampleCanvas === null) {\r\n            this.sampleCanvas = (data: Uint8ClampedArray, index: number) => {\r\n                return data[index + 0]; // only check the red channel because the hidden canvas is in black and white\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport { ThreadMonochrome };\r\n","import { EColor } from \"../../plotter/compositing\";\r\nimport { IPeg } from \"../thread-computer\";\r\n\r\nimport { IThreadToGrow, ThreadBase, ThreadsIterator } from \"./thread-base\";\r\n\r\ninterface ISegmentsRepartition {\r\n    red: number;\r\n    green: number;\r\n    blue: number;\r\n}\r\n\r\nclass ThreadRedBlueGreen extends ThreadBase {\r\n    private threadPegsRed: IPeg[] = [];\r\n    private threadPegsGreen: IPeg[] = [];\r\n    private threadPegsBlue: IPeg[] = [];\r\n\r\n    // indicators describing the colors repartition from the source image\r\n    private frequencyRed: number;\r\n    private frequencyGreen: number;\r\n    private frequencyBlue: number;\r\n\r\n    public get totalNbSegments(): number {\r\n        return ThreadBase.computeNbSegments(this.threadPegsRed) +\r\n            ThreadBase.computeNbSegments(this.threadPegsGreen) +\r\n            ThreadBase.computeNbSegments(this.threadPegsBlue);\r\n    }\r\n\r\n    public lowerNbSegments(targetNumber: number): void {\r\n        const repartition = this.computeIdealSegmentsRepartition(targetNumber);\r\n\r\n        ThreadBase.lowerNbSegmentsForThread(this.threadPegsRed, repartition.red);\r\n        ThreadBase.lowerNbSegmentsForThread(this.threadPegsGreen, repartition.green);\r\n        ThreadBase.lowerNbSegmentsForThread(this.threadPegsBlue, repartition.blue);\r\n    }\r\n\r\n    public iterateOnThreads(nbSegmentsToIgnore: number, callback: ThreadsIterator): void {\r\n        const repartition = this.computeIdealSegmentsRepartition(nbSegmentsToIgnore);\r\n\r\n        ThreadBase.iterateOnThread(this.threadPegsRed, EColor.RED, repartition.red, callback);\r\n        ThreadBase.iterateOnThread(this.threadPegsGreen, EColor.GREEN, repartition.green, callback);\r\n        ThreadBase.iterateOnThread(this.threadPegsBlue, EColor.BLUE, repartition.blue, callback);\r\n    }\r\n\r\n    public getThreadToGrow(): IThreadToGrow {\r\n        const repartition = this.computeIdealSegmentsRepartition(this.totalNbSegments + 1);\r\n        if (repartition.red > 0 && this.threadPegsRed.length < repartition.red + 1) {\r\n            return {\r\n                thread: this.threadPegsRed,\r\n                color: EColor.RED,\r\n            };\r\n        } else if (repartition.green > 0 && this.threadPegsGreen.length < repartition.green + 1) {\r\n            return {\r\n                thread: this.threadPegsGreen,\r\n                color: EColor.GREEN,\r\n            };\r\n        }\r\n\r\n        return {\r\n            thread: this.threadPegsBlue,\r\n            color: EColor.BLUE,\r\n        };\r\n    }\r\n\r\n    public adjustCanvasData(data: Uint8ClampedArray, blackBackground: boolean): void {\r\n        let cumulatedRed = 0;\r\n        let cumulatedGreen = 0;\r\n        let cumulatedBlue = 0;\r\n\r\n        let computeAdjustedValue: (rawValue: number) => number;\r\n        if (blackBackground) {\r\n            computeAdjustedValue = (rawValue: number) => (255 - rawValue) / 2;\r\n        } else {\r\n            computeAdjustedValue = (rawValue: number) => rawValue / 2;\r\n        }\r\n\r\n        const nbPixels = data.length / 4;\r\n        for (let i = 0; i < nbPixels; i++) {\r\n            cumulatedRed += data[4 * i + 0];\r\n            cumulatedGreen += data[4 * i + 1];\r\n            cumulatedBlue += data[4 * i + 2];\r\n\r\n            data[4 * i + 0] = computeAdjustedValue(data[4 * i + 0]);\r\n            data[4 * i + 1] = computeAdjustedValue(data[4 * i + 1]);\r\n            data[4 * i + 2] = computeAdjustedValue(data[4 * i + 2]);\r\n        }\r\n\r\n        if (!blackBackground) {\r\n            cumulatedRed = 255 * nbPixels - cumulatedRed;\r\n            cumulatedGreen = 255 * nbPixels - cumulatedGreen;\r\n            cumulatedBlue = 255 * nbPixels - cumulatedBlue;\r\n        }\r\n\r\n        const totalColor = cumulatedRed + cumulatedGreen + cumulatedBlue;\r\n        this.frequencyRed = cumulatedRed / totalColor;\r\n        this.frequencyGreen = cumulatedGreen / totalColor;\r\n        this.frequencyBlue = cumulatedBlue / totalColor;\r\n    }\r\n\r\n    public enableSamplingFor(color: EColor): void {\r\n        let channel: number;\r\n        if (color === EColor.RED) {\r\n            channel = 0;\r\n        } else if (color === EColor.GREEN) {\r\n            channel = 1;\r\n        } else {\r\n            channel = 2;\r\n        }\r\n\r\n        this.sampleCanvas = (data: Uint8ClampedArray, index: number) => {\r\n            return data[index + channel];\r\n        }\r\n    }\r\n\r\n    private computeIdealSegmentsRepartition(totalNbSegments: number): ISegmentsRepartition {\r\n        const idealRed = totalNbSegments * this.frequencyRed;\r\n        const idealGreen = totalNbSegments * this.frequencyGreen;\r\n        const idealBlue = totalNbSegments * this.frequencyBlue;\r\n\r\n        const repartition = {\r\n            red: Math.floor(idealRed),\r\n            green: Math.floor(idealGreen),\r\n            blue: Math.floor(idealBlue),\r\n        };\r\n\r\n        while (repartition.red + repartition.green + repartition.blue < totalNbSegments) {\r\n            const currentFrequencyRed = repartition.red / Math.max(1, repartition.red + repartition.green + repartition.blue);\r\n            const currentFrequencyGreen = repartition.green / Math.max(1, repartition.red + repartition.green + repartition.blue);\r\n            const currentFrequencyBlue = repartition.blue / Math.max(1, repartition.red + repartition.green + repartition.blue);\r\n\r\n            const gapRed = idealRed - currentFrequencyRed;\r\n            const gapGreen = idealGreen - currentFrequencyGreen;\r\n            const gapBlue = idealBlue - currentFrequencyBlue;\r\n\r\n            if (gapRed > gapGreen && gapRed > gapBlue) {\r\n                repartition.red++;\r\n            } else if (gapGreen > gapRed && gapGreen > gapBlue) {\r\n                repartition.green++;\r\n            } else {\r\n                repartition.blue++;\r\n            }\r\n        }\r\n\r\n        return repartition;\r\n    }\r\n}\r\n\r\nexport { ThreadRedBlueGreen };\r\n","import { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\n\r\nclass Transformation {\r\n    public readonly scaling: number;\r\n    public readonly origin: IPoint;\r\n\r\n    public constructor(frameSize: ISize, elementSize: ISize) {\r\n        const scaleToFitWidth = frameSize.width / elementSize.width;\r\n        const scaleToFitHeight = frameSize.height / elementSize.height;\r\n\r\n        this.scaling = Math.min(scaleToFitWidth, scaleToFitHeight);\r\n        this.origin = {\r\n            x: 0.5 * (frameSize.width - this.scaling * elementSize.width),\r\n            y: 0.5 * (frameSize.height - this.scaling * elementSize.height)\r\n        };\r\n    }\r\n\r\n    public transform(point: IPoint): IPoint {\r\n        return {\r\n            x: this.origin.x + point.x * this.scaling,\r\n            y: this.origin.y + point.y * this.scaling,\r\n        };\r\n    }\r\n}\r\n\r\nexport { Transformation };\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/ts/main.ts\");\n"],"sourceRoot":""}